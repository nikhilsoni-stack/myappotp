{"version":3,"sources":["logo.svg","Register.js","OTP.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Register","pros","id","type","onChange","changed","value","name","onClick","click","OTP","App","state","frameToggle","moblie","otp","verifyOTP","alert","setState","sendotp","length","validateMob","event","target","validateOTP","className","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qJAAAA,EAAOC,QAAU,IAA0B,kC,8HCc5BC,G,YAbA,SAACC,GAEZ,OAGJ,6BACI,+CAA2B,6BAC3B,2BAAOC,GAAG,eAAeC,KAAK,SAASC,SAAUH,EAAKI,QAASC,MAAOL,EAAKM,OAC3E,4BAAQC,QAASP,EAAKQ,OAAtB,cCKWC,EAbL,SAACT,GAEP,OACI,6BACJ,4CAAwB,6BACxB,2BAAOC,GAAG,MAAMC,KAAK,SAASC,SAAUH,EAAKI,QAASC,MAAOL,EAAKM,OAClE,4BAAQC,QAASP,EAAKQ,OAAtB,cCuDWE,E,4MAxDbC,MAAM,CACJC,aAAY,EACZC,OAAO,GACPC,IAAI,I,EAENC,UAAU,WAEW,MAAhB,EAAKJ,MAAMG,KAMdE,MAAM,YACN,EAAKC,SAAS,CACZL,aAAY,KANZI,MAAM,gB,EAWVE,QAAQ,WAEuB,IAA1B,EAAKP,MAAME,OAAOM,QAKrB,EAAKF,SAAS,CACZL,aAAY,IAEdI,MAAM,aANJA,MAAM,mB,EAQVI,YAAY,SAACC,GACX,EAAKJ,SAAS,CACZJ,OAAOQ,EAAMC,OAAOjB,S,EAKxBkB,YAAY,SAACF,GACX,EAAKJ,SAAS,CACZH,IAAIO,EAAMC,OAAOjB,S,uDAKnB,OACA,yBAAKmB,UAAU,OACZC,KAAKd,MAAMC,YAAa,kBAAC,EAAD,CAAUN,KAAMmB,KAAKd,MAAME,OAAQL,MAAOiB,KAAKP,QAASd,QAASqB,KAAKL,aAAtE,KACzB,kBAAC,EAAD,CAAKd,KAAMmB,KAAKd,MAAMG,IAAKN,MAAOiB,KAAKV,UAAWX,QAASqB,KAAKF,mB,GAlDpDG,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fb610d7a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nconst Register=(pros)=>{\r\n    //pros.innerText=\"\";\r\n    return (\r\n\r\n\r\n<div>\r\n    <label>MobileNumber</label><br></br>\r\n    <input id=\"moblieNumber\" type='number' onChange={pros.changed} value={pros.name}></input>\r\n    <button onClick={pros.click}>sendOtp</button>\r\n  </div>\r\n        \r\n    );\r\n}\r\nexport default Register","import React, { Component } from 'react';\r\nconst OTP=(pros)=>{\r\n    //pros.innerText=\"\";\r\n    return (\r\n        <div>\r\n    <label>Enter OTP</label><br></br>\r\n    <input id=\"otp\" type='number' onChange={pros.changed} value={pros.name}></input>\r\n    <button onClick={pros.click}>verifyed</button>\r\n  </div>\r\n\r\n\r\n        \r\n    );\r\n}\r\nexport default OTP","import React ,{Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Register from'./Register';\nimport OTP from './OTP';\nclass App extends Component  {\n  state={\n    frameToggle:true,\n    moblie:'',\n    otp:''\n  }\n  verifyOTP=()=>\n  {\n    if(this.state.otp!=1234)\n    {\n      alert(\"Invalid OTP\");\n      return;\n    }\n    \n    alert(\"verifyed\")\n    this.setState({\n      frameToggle:true,\n      \n    })\n    \n  }\n  sendotp=()=>\n  {\n    if(this.state.moblie.length!=10)\n    {\n      alert(\"Invalid number\");\n      return;\n    }\n    this.setState({\n      frameToggle:false\n    })\n    alert(\"OTP:1234\");\n  }\n  validateMob=(event)=>{\n    this.setState({\n      moblie:event.target.value,\n    })\n\n\n  }\n  validateOTP=(event)=>{\n    this.setState({\n      otp:event.target.value,\n    })\n\n  }\n  render(){\n    return(\n    <div className=\"App\">\n      {this.state.frameToggle? <Register name={this.state.moblie} click={this.sendotp} changed={this.validateMob}> </Register>:\n      <OTP name={this.state.otp} click={this.verifyOTP} changed={this.validateOTP}></OTP>\n      }\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}